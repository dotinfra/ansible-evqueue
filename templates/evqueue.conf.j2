##############################
# Core
##############################
# UID and GID of the process
# If you want the process to change user or group, you must run evqueue as root
# Use uid/gid of www-data if you want to use web board (or change apache uid/gid)
core.gid=33
core.uid=33

# PID file
core.pidfile = /var/run/evqueue/evqueue.pid



##############################
# MySQL configuration
##############################

mysql.database=evqueue
mysql.host=localhost
# mysql.password=
mysql.user={{ evqueue.mysql.user }}


##############################
# Network configuration
##############################

# TCP
# Use "*" to bind on all interfaces
network.bind.ip=127.0.0.1
network.bind.port=5000

# UNIX
network.bind.path = /var/run/evqueue/evqueue.socket

# TCP and UNIX
network.listen.backlog=64
network.rcv.timeout=30
network.snd.timeout=30



##############################
# Process manager
##############################

# Error logs are used when a process returns 0 (no error) but the XML is invalid
# This is often caused by a task not detecting properly error cases
# 
# These logs are very useful to troubleshoot failed executions
# It is normaly safe to enable this as very few logs should be created
processmanager.errlogs.enable=no
processmanager.errlogs.directory=errlogs

# Where to store tasks outputs
processmanager.logs.directory=/tmp

# Delete logs at the end of task execution
# It is strongly recommended to delete logs as the can quickly grow up
processmanager.logs.delete=yes

# Path to the evqueue monitor
processmanager.monitor.path=/usr/bin/evqueue_monitor

# Path to prepend when task filename is relative
processmanager.tasks.directory=.



##############################
# Notifications
##############################

# Path to the evqueue notifications monitor
notifications.monitor.path = /usr/bin/evqueue_notification_monitor

# Where the notifications plugins are stored
# Must be writable by the evqueue process if you want to install plugins
# directly from the web board
notifications.tasks.directory = /usr/share/evqueue/plugins/notifications

# Timout (in seconds) for the notifications plugins
# Use 0 to disable
# It is higly recommanded to keep a timeout to prevent buggy plugins
# from creating many hanged processes
notifications.tasks.timeout = 5;

# Maximum number of concurrent notification scripts
# Above this number, new notifications will not be executed
notifications.tasks.concurrency = 16


##############################
# SSH configuration
##############################

# This is used for remote task execution
# If no key is specified, default SSH key of the user will be used
# If you want to use the default key you must comment "processmanager.monitor.ssh_key"
# processmanager.monitor.ssh_key=
processmanager.monitor.ssh_path=/usr/bin/ssh



##############################
# workflow instance database
##############################

# Save workflow parameters in database
# This is required if you want to use search on parameters
# 
# As on line is inserted for each parameter of each workflow,
# the table t_workflow_instance_parameters can grow quickly.
# You should be careful when using this option on high loaded platforms
workflowinstance.saveparameters=yes

# Savepoint level
# 
# 0 : Save workflows only on engine restart
# This has the best performance as no database is used
# No history will be kept at all
#
# 1 : Save workflows only on workflow exit and restart
# Be aware that in case of engine crash, you will loose all running workflows
# This will disable recording of parameters
# See workflowinstance.saveparameters
# 
# 2 : Save workflows on start, stop or when the engine is restarted
# This is the recommended setting
#
# 3 : Save workflows on each state change
# This can be useful if you want to monitor workflows from database
# However, be aware that this can generate very high load on MySQL et that
# this will slow down the engine
workflowinstance.savepoint.level=2

# Retry controls what to do on database errors when saving workflows
# It is recommended to enable this whis at least 2 retry
# Wait time is in seconds
workflowinstance.savepoint.retry.enable=yes
workflowinstance.savepoint.retry.times=2
workflowinstance.savepoint.retry.wait=2



##############################
# Logger
##############################

# Log notice or higher priority to syslog
# It is recommended to always keep this active
logger.syslog.enable = yes
logger.syslog.filter = LOG_NOTICE

# Log errors to database
# This is required if you want to access logs from the web board
# This can slow down the engine on busy systems and it is recommanded to filter warnings only in production
logger.db.enable = yes
logger.db.filter = LOG_WARNING



##############################
# Garbage collector
##############################

# The garbage collector is used to free old hostory from database
gc.enable = yes

# Interval in seconds between executions of the GC
gc.interval = 43200

# If entries are to be removed, GC will not free more than this limit at once
# You should really use this to avoid long locks on your database
gc.limit = 1000

# If the limit is reached, GC will wait this interval (in seconds) before trying to free again up to gc.limit
gc.delay = 2

# Clean database logs older than (in days)
gc.logs.retention = 7

# Clean terminated workflow instances older than (in days)
gc.workflowinstance.retention = 30
